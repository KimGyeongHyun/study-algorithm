import sys
INF = int(1e9)

# 플로이드 워셜 알고리즘은 모든 노드 각각의 최단 경로가 필요할 때 사용
# 다익스트라 알고리즘과 비교해 구현이 쉬움
# 3중 포문 시간복잡도 O(n**3)

# -구성
# 방향 그래프

# -작동 방식
# 그래프 구성
# (+++++ 거처가는 노드를 끝까지 순회 (반복))
# ++++++++++++++++++++++++++++++++++++++++++++++
# (----- 출발 노드를 끝까지 순회 (반복))
# ----------------------------------------------
# (===== 도착 노드를 끝까지 순회 (반복))
# ==============================================
# 그래프에서의 출발 -> 도착 거리보다 거처가는 노드를 지날 때 더 거리가 작다면
# 해당 거리로 그래프를 수정함
# ==============================================
# ----------------------------------------------
# ++++++++++++++++++++++++++++++++++++++++++++++

input = sys.stdin.readline

n = int(input())    # 노드 개수
m = int(input())    # 간선 개수

# 그래프 무한 초기화
graph = [[INF] * (n + 1) for _ in range(n + 1)]

# 본인은 0으로 초기화
for a in range(1, n + 1):
    for b in range(1, n + 1):
        if a == b:
            graph[a][b] = 0

# 그래프 입력
for _ in range(m):
    # a -> b 의 거리
    a, b, c = map(int, input().split())
    graph[a][b] = c

# 플로이드 워셜 알고리즘 수행
for k in range(1, n + 1):   # 거처가는 노드
    for a in range(1, n + 2):   # 출발 노드
        for b in range(1, n + 1):   # 도착 노드
            # 그래프에 최단 거리 갱신
            graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])

# 그래프 출력
for a in range(1, n + 1):
    for b in range(1, n + 1):
        if graph[a][b] == INF:
            print("INFINITY", end = " ")
        else:
            print(graph[a][b], end=" ")
    print()
