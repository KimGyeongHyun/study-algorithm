다익스트라 알고리즘은 방향(무방향) 그래프에서 
어느 한 노드를 기준으로 다른 노드로 가는 최단거리를 구하는 알고리즘이다
해당 알고리즘은 한 노드를 기준으로만 최단거리를 구할 수 있기 때문에
모든 노드를 기준으로 다른 노드로 가는 최단거리를 구하기 위해선 
플로이드 워셜 알고리즘이 필요하다

기존 다익스트라 알고리즘에 힙 추가
기존 다익스트라 알고리즘 중 중간 노드를 구하는 get_smallest_node() 메소드는
O(n) 의 시간복잡도를 가짐
힙 구조를 미리 만들어 놓고 최단 거리를 갱신할 때마다 push (시간복잡도 : O(log(n))),
최단 거리를 구할 때 pop (시간복잡도 : O(log(n))) 하면 시간복잡도를 O(log(n)) 으로 줄일 수 있다

플로이드 워셜 알고리즘은 모든 노드 각각의 최단 경로가 필요할 때 사용
다익스트라 알고리즘과 비교해 구현이 쉬움
3중 포문 시간복잡도 O(n**3)

플로이드 워셜 알고리즘의 시간 복잡도는 O(n*3),
다익스트라 알고리즘은 O(nlog(n)) 이다 (힙 사용 기준)
따라서 노드 수가 적고 모든 최단거리를 확인하기 위해선 플로이드,
하나의 최단거리만 알면 되거나 간선이 많으면 다익스트라 알고리즘을 활용하면 된다